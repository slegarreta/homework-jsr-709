{"ast":null,"code":"import _classCallCheck from \"/Users/sam/Downloads/14_starter_code/3_practice_create_read/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sam/Downloads/14_starter_code/3_practice_create_read/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sam/Downloads/14_starter_code/3_practice_create_read/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sam/Downloads/14_starter_code/3_practice_create_read/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sam/Downloads/14_starter_code/3_practice_create_read/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sam/Downloads/14_starter_code/3_practice_create_read/src/App.js\";\nimport React from 'react'; // Import statements for components\n\nimport firebase from 'firebase';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      items: [],\n      value: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // 1. firebase config file! we need to add this to get firebase to connect!\n      var firebaseConfig = {\n        apiKey: \"AIzaSyAHLHnY7aoCPC2Sjl7fEhhstbm3ps52-T4\",\n        authDomain: \"jsr-709-sam.firebaseapp.com\",\n        databaseURL: \"https://jsr-709-sam.firebaseio.com\",\n        projectId: \"jsr-709-sam\",\n        storageBucket: \"\",\n        messagingSenderId: \"1061331343323\",\n        appId: \"1:1061331343323:web:81504f2ae8488ee7\"\n      }; // 2. Initialize Firebase Instance\n\n      firebase.initializeApp(firebaseConfig); // 3. Make a connection to the database portion of the firebase instance\n\n      var database = firebase.database(); // 3. Find the specific table we are looking for and make a connection to it\n\n      var toDoListTable = database.ref('todolist');\n      this.setState({\n        toDoListTable: toDoListTable\n      }); // 4. Create a .on('value') event listener for this data base\n      //This is a firebase method that listens for when a value on a table changes!\n      // This method is triggered once when the listener is attached and again every time the data, including children, changes.\n      // a. call the .val() method on the response\n      // b. loop over all of the items in the returned object and turn them into an array\n      // d. use setState to add the data to the state.\n\n      toDoListTable.on('value', function (response) {\n        var toDoListData = response.val();\n        var toDoListArray = [];\n\n        for (var item in toDoListData) {\n          toDoListArray.push(toDoListData[item]);\n        }\n\n        _this2.setState({\n          items: toDoListArray\n        });\n      });\n    } // 8. Create an handeChange event listener to handle the input from an input!\n    // 9. Create an handleClick event listener to handle the click of a button\n    // This function should take the data, turn into a data structure that matches the rest of your list\n    // ie. maybe an object with a key title\n    // Use the .push method of firebase to add the record to the firebase table\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var listItems = this.state.items.map(function (item, index) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, item.title);\n      }); //5. Loop over all of the to do list items now living in state from firebase!\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"bg-light m-3 p-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"To Do List\"), React.createElement(\"ul\", {\n        className: \"list-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, listItems))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/sam/Downloads/14_starter_code/3_practice_create_read/src/App.js"],"names":["React","firebase","App","state","items","value","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","database","toDoListTable","ref","setState","on","response","toDoListData","val","toDoListArray","item","push","listItems","map","index","title","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,UAArB;;IAEqBC,G;;;;;;;;;;;;;;;;;UACpBC,K,GAAQ;AACPC,MAAAA,KAAK,EAAE,EADA;AAEPC,MAAAA,KAAK,EAAE;AAFA,K;;;;;;wCAIY;AAAA;;AACnB;AACA,UAAIC,cAAc,GAAG;AACrBC,QAAAA,MAAM,EAAE,yCADa;AAErBC,QAAAA,UAAU,EAAE,6BAFS;AAGrBC,QAAAA,WAAW,EAAE,oCAHQ;AAIrBC,QAAAA,SAAS,EAAE,aAJU;AAKrBC,QAAAA,aAAa,EAAE,EALM;AAMrBC,QAAAA,iBAAiB,EAAE,eANE;AAOrBC,QAAAA,KAAK,EAAE;AAPc,OAArB,CAFmB,CAWnB;;AACAZ,MAAAA,QAAQ,CAACa,aAAT,CAAuBR,cAAvB,EAZmB,CAanB;;AACA,UAAIS,QAAQ,GAAGd,QAAQ,CAACc,QAAT,EAAf,CAdmB,CAenB;;AACA,UAAIC,aAAa,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAAb,CAApB;AAEA,WAAKC,QAAL,CAAc;AACbF,QAAAA,aAAa,EAAEA;AADF,OAAd,EAlBmB,CAqBnB;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAAA,aAAa,CAACG,EAAd,CAAiB,OAAjB,EAA0B,UAACC,QAAD,EAAc;AACvC,YAAIC,YAAY,GAAGD,QAAQ,CAACE,GAAT,EAAnB;AACA,YAAIC,aAAa,GAAG,EAApB;;AAEA,aAAK,IAAIC,IAAT,IAAiBH,YAAjB,EAA+B;AAC9BE,UAAAA,aAAa,CAACE,IAAd,CAAmBJ,YAAY,CAACG,IAAD,CAA/B;AACA;;AAED,QAAA,MAAI,CAACN,QAAL,CAAc;AACbd,UAAAA,KAAK,EAAEmB;AADM,SAAd;AAGA,OAXD;AAaA,K,CAED;AAEA;AACA;AACA;AACA;;;;6BAES;AACR,UAAIG,SAAS,GAAG,KAAKvB,KAAL,CAAWC,KAAX,CAAiBuB,GAAjB,CAAqB,UAACH,IAAD,EAAOI,KAAP,EAAiB;AACrD,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKJ,IAAI,CAACK,KAAV,CAAP;AACA,OAFe,CAAhB,CADQ,CAIR;;AAEA,aACC;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAI,QAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,EAEC;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEEH,SAFF,CAFD,CADD,CADD,CADD;AAaA;;;;EAzE+B1B,KAAK,CAAC8B,S;;SAAlB5B,G","sourcesContent":["import React from 'react';\n// Import statements for components\nimport firebase from 'firebase';\n\nexport default class App extends React.Component {\n\tstate = {\n\t\titems: [],\n\t\tvalue: ''\n\t};\n\tcomponentDidMount() {\n\t\t// 1. firebase config file! we need to add this to get firebase to connect!\n\t\tvar firebaseConfig = {\n\t\tapiKey: \"AIzaSyAHLHnY7aoCPC2Sjl7fEhhstbm3ps52-T4\",\n\t\tauthDomain: \"jsr-709-sam.firebaseapp.com\",\n\t\tdatabaseURL: \"https://jsr-709-sam.firebaseio.com\",\n\t\tprojectId: \"jsr-709-sam\",\n\t\tstorageBucket: \"\",\n\t\tmessagingSenderId: \"1061331343323\",\n\t\tappId: \"1:1061331343323:web:81504f2ae8488ee7\"\n\t};\n\t\t// 2. Initialize Firebase Instance\n\t\tfirebase.initializeApp(firebaseConfig);\n\t\t// 3. Make a connection to the database portion of the firebase instance\n\t\tlet database = firebase.database();\n\t\t// 3. Find the specific table we are looking for and make a connection to it\n\t\tlet toDoListTable = database.ref('todolist');\n\n\t\tthis.setState({\n\t\t\ttoDoListTable: toDoListTable\n\t\t})\n\t\t// 4. Create a .on('value') event listener for this data base\n\t\t//This is a firebase method that listens for when a value on a table changes!\n\t\t// This method is triggered once when the listener is attached and again every time the data, including children, changes.\n\t\t// a. call the .val() method on the response\n\t\t// b. loop over all of the items in the returned object and turn them into an array\n\t\t// d. use setState to add the data to the state.\n\t\ttoDoListTable.on('value', (response) => {\n\t\t\tlet toDoListData = response.val();\n\t\t\tlet toDoListArray = [];\n\n\t\t\tfor (let item in toDoListData) {\n\t\t\t\ttoDoListArray.push(toDoListData[item])\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\titems: toDoListArray\n\t\t\t})\n\t\t})\n\n\t}\n\n\t// 8. Create an handeChange event listener to handle the input from an input!\n\n\t// 9. Create an handleClick event listener to handle the click of a button\n\t// This function should take the data, turn into a data structure that matches the rest of your list\n\t// ie. maybe an object with a key title\n\t// Use the .push method of firebase to add the record to the firebase table\n\n\trender() {\n\t\tlet listItems = this.state.items.map((item, index) => {\n\t\t\treturn <li>{item.title}</li>\n\t\t})\n\t\t//5. Loop over all of the to do list items now living in state from firebase!\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t<h1 className=\"bg-light m-3 p-3\">To Do List</h1>\n\t\t\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t\t\t{/* 6. Add the variable that holds all of the to do list items here! */}\n\t\t\t\t\t\t\t{listItems}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}